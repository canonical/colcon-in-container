name: colcon build in container integration tests
on:
  push:
    branches: ['main']
  pull_request:
  schedule:
    # Every two weeks
    - cron: '30 1 1,15 * *'
  workflow_dispatch:

# Test the released and current master branch
jobs:
  in_container_integration_test:
    name: "Integration Test"
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, ubuntu-24.04, [self-hosted, linux, X64, jammy, xlarge]]
        ros_version: [jazzy, humble, iron, rolling]
        provider: [lxd, multipass]
        exclude:
          - os: ubuntu-20.04
            provider: multipass
          - os: ubuntu-22.04
            provider: multipass
          - os: ubuntu-24.04
            provider: multipass
          - {os: [self-hosted, linux, X64, jammy, xlarge], provider: lxd}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - uses: actions/setup-python@v5
      - name: Install LXD
        if: ${{ matrix.provider == 'lxd' }}
        uses: canonical/setup-lxd@v0.1.0
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt upgrade -y
          sudo rm /usr/lib/python3.*/EXTERNALLY-MANAGED || true
          python3 -m pip install --upgrade pip
          pip install setuptools
          pip install colcon-common-extensions

          if [ ${{ matrix.provider }} == 'multipass' ]; then
            sudo snap install multipass
          fi
      - name: Install the extension
        run: |
          pip install .
      - name: Checkout example to build
        uses: actions/checkout@v3
        with:
          path: ros_ws/src/ros2demo
          repository: ros2/demos
          ref: ${{ matrix.ros_version }}
      - name: Colcon build in container
        run: |
          cd ros_ws
          snap info multipass
          sudo snap logs -n 100 multipass
          whereis multipass
          ls -lah /var/snap/multipass/common/
          colcon --log-level=debug build-in-container --provider ${{ matrix.provider}} --ros-distro ${{ matrix.ros_version }} --colcon-build-args "--packages-select demo_nodes_cpp --cmake-args -DCMAKE_BUILD_TYPE=Release"
      - name: Colcon build in container verify files
        run: |
          cd ros_ws
          grep ${{ matrix.ros_version }} install_in_container/setup.sh
          ls build_in_container/demo_nodes_cpp/Makefile
          ls install_in_container/demo_nodes_cpp/lib/demo_nodes_cpp/talker
      - name: Colcon test in container
        run: |
          cd ros_ws
          colcon --log-level=debug test-in-container --provider ${{ matrix.provider}} --ros-distro ${{ matrix.ros_version }} --colcon-test-args "--packages-select demo_nodes_cpp --return-code-on-test-failure"
      - name: Colcon test in container verify files
        run: |
          cd ros_ws
          grep "Hostname=\"colcon-in-container\"" test_results_in_container/demo_nodes_cpp/Testing/*/Test.xml
      - name: Colcon release in container
        run: |
          cd ros_ws
          colcon --log-level=debug release-in-container --provider ${{ matrix.provider}} --ros-distro ${{ matrix.ros_version }} --packages-select demo_nodes_cpp --bloom-generator="rosdebian"
      - name: Colcon release in container verify files
        run: |
          cd ros_ws
          ls release_in_container/demo_nodes_cpp/ros-${{ matrix.ros_version }}-demo-nodes-cpp_*.deb
          ls release_in_container/demo_nodes_cpp/ros-${{ matrix.ros_version }}-demo-nodes-cpp-dbgsym_*.ddeb
          ls release_in_container/COLCON_IGNORE
          ls release_in_container/demo_nodes_cpp/debian

