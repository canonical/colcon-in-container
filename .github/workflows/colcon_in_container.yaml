name: colcon build in container integration tests
on:
  push:
    branches: ['main']
  pull_request:
  schedule:
    # Every two weeks
    - cron: '30 1 1,15 * *'
  workflow_dispatch:

# Test the released and current master branch
jobs:
  in_container_integration_test:
    name: "Integration Test"
    strategy:
      fail-fast: false
      matrix:
        #os: [ubuntu-20.04, ubuntu-22.04, ubuntu-24.04, [self-hosted, linux, X64, jammy, xlarge]]
        os: [[self-hosted, linux, X64, jammy, xlarge]]
        ros_version: [jazzy, humble, rolling]
        provider: [lxd, multipass]
        exclude:
          - os: ubuntu-20.04
            provider: multipass
          - os: ubuntu-22.04
            provider: multipass
          - os: ubuntu-24.04
            provider: multipass
          - {os: [self-hosted, linux, X64, jammy, xlarge], provider: lxd}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - uses: actions/setup-python@v5
      - name: Install LXD
        if: ${{ matrix.provider == 'lxd' }}
        uses: canonical/setup-lxd@v0.1.0
      - name: Install dependencies
        run: |
          sudo apt purge docker-ce docker-ci-cli -y
          sudo apt update
          sudo apt upgrade -y
      - name: Install Multipass
        run: |
          sudo snap install multipass
        if: "${{ matrix.provider == 'multipass' }}"
      - name: Install dependencies 2
        run: |
          sudo apt update
          sudo apt upgrade -y
          #          sudo rm /usr/lib/python3.*/EXTERNALLY-MANAGED || true
          #          python3 -m pip install --upgrade pip
          #          pip install setuptools
          #          pip install colcon-common-extensions
          #      - name: Install the extension
          #        run: |
          #          pip install .
          #      - name: Checkout example to build
          #        uses: actions/checkout@v3
          #        with:
          #          path: ros_ws/src/ros2demo
          #          repository: ros2/demos
          #          ref: ${{ matrix.ros_version }}
          #      - name: Colcon build in container
          #        run: |
          #          cd ros_ws
          #          colcon --log-level=debug build-in-container --provider ${{ matrix.provider}} --ros-distro ${{ matrix.ros_version }} --colcon-build-args "--packages-select demo_nodes_cpp --cmake-args -DCMAKE_BUILD_TYPE=Release"
          #      - name: Colcon build in container verify files
          #        run: |
          #          cd ros_ws
          #          grep ${{ matrix.ros_version }} install_in_container/setup.sh
          #          ls build_in_container/demo_nodes_cpp/Makefile
          #          ls install_in_container/demo_nodes_cpp/lib/demo_nodes_cpp/talker
          #      - name: Colcon test in container
          #        run: |
          #          cd ros_ws
          #          colcon --log-level=debug test-in-container --provider ${{ matrix.provider}} --ros-distro ${{ matrix.ros_version }} --colcon-test-args "--packages-select demo_nodes_cpp --return-code-on-test-failure"
          #      - name: Colcon test in container verify files
          #        run: |
          #          cd ros_ws
          #          grep "Hostname=\"colcon-in-container\"" test_results_in_container/demo_nodes_cpp/Testing/*/Test.xml
          #      - name: Colcon release in container
          #        run: |
          #          cd ros_ws
          #          colcon --log-level=debug release-in-container --provider ${{ matrix.provider}} --ros-distro ${{ matrix.ros_version }} --packages-select demo_nodes_cpp --bloom-generator="rosdebian"
          #      - name: Colcon release in container verify files
          #        run: |
          #          cd ros_ws
          #          ls release_in_container/demo_nodes_cpp/ros-${{ matrix.ros_version }}-demo-nodes-cpp_*.deb
          #          ls release_in_container/demo_nodes_cpp/ros-${{ matrix.ros_version }}-demo-nodes-cpp-dbgsym_*.ddeb
          #          ls release_in_container/COLCON_IGNORE
          #          ls release_in_container/demo_nodes_cpp/debian

          #  eol_distro_in_container_integration_test:
          #    name: "EoL distro Integration Test"
          #    strategy:
          #      fail-fast: false
          #      matrix:
          #        os: [ubuntu-24.04, [self-hosted, linux, X64, jammy, xlarge]]
          #        ros_version: [foxy]
          #        provider: [lxd, multipass]
          #        exclude:
          #          - os: ubuntu-24.04
          #            provider: multipass
          #          - {os: [self-hosted, linux, X64, jammy, xlarge], provider: lxd}
          #    runs-on: ${{ matrix.os }}
          #    steps:
          #      - name: Checkout sources
          #        uses: actions/checkout@v3
          #      - uses: actions/setup-python@v5
          #      - name: Install LXD
          #        if: ${{ matrix.provider == 'lxd' }}
          #        uses: canonical/setup-lxd@v0.1.0
          #      - name: Install Multipass
          #        run: |
          #          sudo snap install multipass
          #        if: "${{ matrix.provider == 'multipass' }}"
          #      - name: Install dependencies
          #        run: |
          #          sudo apt update
          #          sudo apt upgrade -y
          #          sudo rm /usr/lib/python3.*/EXTERNALLY-MANAGED || true
          #          python3 -m pip install --upgrade pip
          #          pip install setuptools
          #          pip install colcon-common-extensions
          #      - name: Install the extension
          #        run: |
          #          pip install .
          #      - name: Checkout example to build
          #        uses: actions/checkout@v3
          #        with:
          #          path: ros_ws/src/ros2demo
          #          repository: ros2/demos
          #          ref: ${{ matrix.ros_version }}
          #      - name: Colcon build in container
          #        run: |
          #          cd ros_ws
          #          # Note that pendulum_control depends on the tlsf_cpp package not present in ROS ESM nor in the workspace sources
          #          colcon --log-level=debug build-in-container --pro ${{ secrets.PRO_TOKEN }} --auto-deps-management --packages-select pendulum_msgs pendulum_control --provider ${{ matrix.provider}} --ros-distro ${{ matrix.ros_version }}
          #      - name: Colcon build in container verify files
          #        run: |
          #          cd ros_ws
          #
          #          # dependencies underlay workspace
          #          grep ${{ matrix.ros_version }} install_in_container_underlay/setup.sh
          #          ls build_in_container_underlay/tlsf_cpp/Makefile
          #          ls install_in_container_underlay/tlsf_cpp/bin/tlsf_allocator_example
          #
          #          # package workspace
          #          grep ${{ matrix.ros_version }} install_in_container/setup.sh
          #          ls build_in_container/pendulum_control/Makefile
          #          ls install_in_container/pendulum_control/bin/pendulum_demo
          #      - name: Colcon test in container
          #        run: |
          #          cd ros_ws
          #          colcon --log-level=debug test-in-container --pro ${{ secrets.PRO_TOKEN }} --auto-deps-management --packages-select pendulum_msgs pendulum_control --provider ${{ matrix.provider}} --ros-distro ${{ matrix.ros_version }} --colcon-test-args "--return-code-on-test-failure"
          #      - name: Colcon test in container verify files
          #        run: |
          #          cd ros_ws
          #          grep "Hostname=\"colcon-in-container\"" test_results_in_container/pendulum_control/Testing/*/Test.xml
          #      - name: Colcon release in container
          #        run: |
          #          cd ros_ws
          #          colcon --log-level=debug release-in-container --pro ${{ secrets.PRO_TOKEN }} --auto-deps-management --provider ${{ matrix.provider}} --ros-distro ${{ matrix.ros_version }} --packages-select pendulum_msgs pendulum_control --bloom-generator="rosdebian" --install-released-packages
          #      - name: Colcon release in container verify files
          #        run: |
          #          cd ros_ws
          #          ls release_in_container/pendulum_msgs/ros-${{ matrix.ros_version }}-pendulum-msgs_*.deb
          #          ls release_in_container/pendulum_control/ros-${{ matrix.ros_version }}-pendulum-control_*.deb
          #          ls release_in_container/pendulum_control/ros-${{ matrix.ros_version }}-pendulum-control-dbgsym_*.ddeb
          #          ls release_in_container/COLCON_IGNORE
          #          ls release_in_container/pendulum_msgs/debian
          #          ls release_in_container/pendulum_control/debian
          #
